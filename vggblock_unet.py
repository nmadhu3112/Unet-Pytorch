# -*- coding: utf-8 -*-
"""VGGblock_unet.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1g1xivEXc76Mf8OpTEznWc083AwGlVyph
"""

import torch
import torch.nn as nn
import torchvision.models as models

class VGG_UNet(nn.Module):
    def __init__(self, num_classes=1):
        super(VGG_UNet, self).__init__()

        # Load pre-trained VGG-16 model
        vgg16 = models.vgg16(pretrained=True)

        # Use the convolutional part of VGG (encoder part)
        self.encoder = vgg16.features

        # Decoder part (upsampling)
        self.upconv1 = nn.ConvTranspose2d(512, 256, kernel_size=2, stride=2)
        self.upconv2 = nn.ConvTranspose2d(256, 128, kernel_size=2, stride=2)
        self.upconv3 = nn.ConvTranspose2d(128, 64, kernel_size=2, stride=2)
        self.upconv4 = nn.ConvTranspose2d(64, 32, kernel_size=2, stride=2)

        # Final output layer
        self.final_conv = nn.Conv2d(32, num_classes, kernel_size=1)

    def forward(self, x):
        # Pass input through VGG layers (encoder)
        x1 = self.encoder[0](x)  # Conv1
        x2 = self.encoder[5](x1)  # Conv2
        x3 = self.encoder[10](x2)  # Conv3
        x4 = self.encoder[17](x3)  # Conv4
        x5 = self.encoder[24](x4)  # Conv5

        # Decoder
        x = self.upconv1(x5)
        x = self.upconv2(x)
        x = self.upconv3(x)
        x = self.upconv4(x)

        # Output segmentation mask
        output = self.final_conv(x)
        return output