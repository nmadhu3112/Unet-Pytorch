# -*- coding: utf-8 -*-
"""Unet.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1okAx-xm1bq5YC-e4Rvip2gOOj_8Z8Yh7
"""

import torch
import torch.nn as nn
import torch.optim as optim

batch_size = 16
num_epochs = 100
learning_rate = 0.001

class UNet(nn.Module):
    def __init__(self, in_channels, out_channels, num_filters=32):
        super(UNet, self).__init__()

        # Encoder path
        self.conv1 = nn.Conv2d(in_channels, num_filters, kernel_size=3, padding=1)
        self.bn1 = nn.BatchNorm2d(num_filters)
        self.relu1 = nn.ReLU(inplace=True)
        self.conv2 = nn.Conv2d(num_filters, num_filters* 2, kernel_size=3, padding=1)
        self.bn2 = nn.BatchNorm2d(num_filters * 2)
        self.relu2 = nn.ReLU(inplace=True)
        self.maxpool1 = nn.MaxPool2d(kernel_size=2, stride=2)

        # Bottleneck
        self.conv3 = nn.Conv2d(num_filters * 2, num_filters * 4, kernel_size=3, padding=1)
        self.bn3 = nn.BatchNorm2d(num_filters * 4)
        self.relu3 = nn.ReLU(inplace=True)
        self.conv3 = nn.Conv2d(num_filters * 2, num_filters * 4, kernel_size=3, padding=1)
        self.bn3 = nn.BatchNorm2d(num_filters * 4)
        self.relu3 = nn.ReLU(inplace=True)

        # Decoder path
        self.upsample1 = nn.Upsample(scale_factor=2, mode='bilinear')
        self.conv4 = nn.Conv2d(num_filters * 4, num_filters * 2, kernel_size=3, padding=1)
        self.bn4 = nn.BatchNorm2d(num_filters * 2)
        self.relu4 = nn.ReLU(inplace=True)
        self.conv5 = nn.Conv2d(num_filters * 2, num_filters, kernel_size=3, padding=1)
        self.bn5 = nn.BatchNorm2d(num_filters)
        self.relu5 = nn.ReLU(inplace=True)
        self.conv6 = nn.Conv2d(num_filters, out_channels, kernel_size=1)

    def forward(self, x):
        # Encoder path
        x1 = self.relu1(self.bn1(self.conv1(x)))
        x2 = self.relu2(self.bn2(self.conv2(x1)))
        x3 = self.maxpool1(x2)
        x3 = self.relu3(self.bn3(self.conv3(x3)))

        # Decoder path
        x3 = self.upsample1(x3)
        x4 = self.relu4(self.bn4(self.conv4(torch.cat([x2, x3], dim=1))))
        x5 = self.relu5(self.bn5(self.conv5(x4)))
        x6 = self.conv6(x5)

        return x6

# Load your dataset
# ...

# Create the U-Net model
model = UNet(in_channels=3, out_channels=1)  # Assuming 3 input channels and 1 output channel

# Define loss function and optimizer
loss_fn = nn.BCELoss()
optimizer = optim.Adam(model.parameters(), lr=learning_rate)

# Training loop
for epoch in range(num_epochs):
    for images,
 masks in dataloader:
        optimizer.zero_grad()
        outputs = model(images)
        loss = loss_fn(outputs, masks)
        loss.backward()
        optimizer.step()

    print(f"Epoch {epoch+1}/{num_epochs}, Loss: {loss.item():.4f}")

# Save the model
torch.save(model.state_dict(),
 "unet_model.pth")

import torch
import torch.nn as nn
import torch.nn.functional as F

class UNet(nn.Module):
    def __init__(self, input_channels=1):
        super(UNet, self).__init__()

        # Encoder
        self.enc1 = self.conv_block(input_channels, 64)
        self.enc2 = self.conv_block(64, 128)
        self.enc3 = self.conv_block(128, 256)
        self.enc4 = self.conv_block(256, 512, dropout=True)

        # Bottleneck
        self.bottleneck = self.conv_block(512, 1024, dropout=True)

        # Decoder
        self.upconv6 = self.upconv(1024, 512)
        self.dec6 = self.conv_block(1024, 512)

        self.upconv7 = self.upconv(512, 256)
        self.dec7 = self.conv_block(512, 256)

        self.upconv8 = self.upconv(256, 128)
        self.dec8 = self.conv_block(256, 128)

        self.upconv9 = self.upconv(128, 64)
        self.dec9 = self.conv_block(128, 64)

        # Final output layer
        self.conv10 = nn.Conv2d(64, 1, kernel_size=1)  # Sigmoid will be applied in the loss function

    def conv_block(self, in_channels, out_channels, dropout=False):
        layers = [
            nn.Conv2d(in_channels, out_channels, kernel_size=3, padding=1),
            nn.ReLU(inplace=True),
            nn.Conv2d(out_channels, out_channels, kernel_size=3, padding=1),
            nn.ReLU(inplace=True)
        ]
        if dropout:
            layers.append(nn.Dropout(0.5))
        return nn.Sequential(*layers)

    def upconv(self, in_channels, out_channels):
        return nn.ConvTranspose2d(in_channels, out_channels, kernel_size=2, stride=2)

    def forward(self, x):
        # Encoder
        e1 = self.enc1(x)
        e2 = self.enc2(F.max_pool2d(e1, kernel_size=2))
        e3 = self.enc3(F.max_pool2d(e2, kernel_size=2))
        e4 = self.enc4(F.max_pool2d(e3, kernel_size=2))

        # Bottleneck
        b = self.bottleneck(F.max_pool2d(e4, kernel_size=2))

        # Decoder
        d6 = self.upconv6(b)
        d6 = self.crop_and_concat(d6, e4)
        d6 = self.dec6(d6)

        d7 = self.upconv7(d6)
        d7 = self.crop_and_concat(d7, e3)
        d7 = self.dec7(d7)

        d8 = self.upconv8(d7)
        d8 = self.crop_and_concat(d8, e2)
        d8 = self.dec8(d8)

        d9 = self.upconv9(d8)
        d9 = self.crop_and_concat(d9, e1)
        d9 = self.dec9(d9)

        # Final output layer
        out = self.conv10(d9)
        return out

    def crop_and_concat(self, upsampled, skip):
        """Crop the upsampled feature map and concatenate it with the skip connection."""
        _, _, h_skip, w_skip = skip.size()
        _, _, h_upsampled, w_upsampled = upsampled.size()

        crop_h = (h_upsampled - h_skip) // 2
        crop_w = (w_upsampled - w_skip) // 2

        upsampled_cropped = upsampled[:, :, crop_h:crop_h + h_skip, crop_w:crop_w + w_skip]

        return torch.cat((upsampled_cropped, skip), dim=1)