# -*- coding: utf-8 -*-
"""ALexnet_unet.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1g1xivEXc76Mf8OpTEznWc083AwGlVyph
"""

import torch
import torch.nn as nn
import torchvision.models as models

class AlexNetUNet(nn.Module):
    def __init__(self, num_classes=1):
        super(AlexNetUNet, self).__init__()

        # Load pre-trained AlexNet model
        alexnet = models.alexnet(pretrained=True)

        # Use the first 5 convolutional layers of AlexNet
        self.encoder = nn.Sequential(
            alexnet.features[0],  # Conv1
            alexnet.features[1],  # ReLU
            alexnet.features[3],  # MaxPool1
            alexnet.features[5],  # Conv2
            alexnet.features[6],  # ReLU
            alexnet.features[8],  # MaxPool2
            alexnet.features[10], # Conv3
            alexnet.features[11], # ReLU
            alexnet.features[13], # MaxPool3
            alexnet.features[15], # Conv4
            alexnet.features[16], # ReLU
            alexnet.features[18], # MaxPool4
            alexnet.features[20], # Conv5
            alexnet.features[21], # ReLU
            alexnet.features[23]  # MaxPool5
        )

        # Decoder part (Expansive Path)
        self.upconv1 = nn.ConvTranspose2d(256, 128, kernel_size=2, stride=2)
        self.upconv2 = nn.ConvTranspose2d(128, 64, kernel_size=2, stride=2)
        self.upconv3 = nn.ConvTranspose2d(64, 32, kernel_size=2, stride=2)
        self.upconv4 = nn.ConvTranspose2d(32, 16, kernel_size=2, stride=2)

        # Final output layer (for segmentation)
        self.final_conv = nn.Conv2d(16, num_classes, kernel_size=1)

    def forward(self, x):
        # Encoding part: Feature extraction with AlexNet
        x1 = self.encoder[0](x)  # Conv1
        x2 = self.encoder[3](x1)  # Conv2
        x3 = self.encoder[6](x2)  # Conv3
        x4 = self.encoder[10](x3) # Conv4
        x5 = self.encoder[15](x4) # Conv5

        # Decoding part: Upsample and restore spatial resolution
        x = self.upconv1(x5)
        x = self.upconv2(x)
        x = self.upconv3(x)
        x = self.upconv4(x)

        # Output segmentation mask
        output = self.final_conv(x)
        return output